install.packages("slam", repos = "https://cloud.r-project.org", type = "source")
source("/Users/juxue/Desktop/fyp/GroupAllocator/R/optimization_model.R", encoding = "UTF-8")
install.packages("ompr")
install.packages("ompr.roi")
source("/Users/juxue/Desktop/fyp/GroupAllocator/R/optimization_model.R", encoding = "UTF-8")
 .libPaths()
file.exists(file.path(.libPaths()[1], "ompr.roi"))
R.version.string
.libPaths()
install.packages("slam",                  lib = .libPaths()[1],                  repos = "https://cloud.r-project.org",                  type = "binary")
install.packages("ROI", repos = "https://cloud.r-project.org", lib = .libPaths()[1])
install.packages("ROI.plugin.glpk", repos = "https://cloud.r-project.org", lib = .libPaths()[1])
install.packages("remotes", repos = "https://cloud.r-project.org", lib = .libPaths()[1])
remotes::install_github("dirkschumacher/ompr@main", lib = .libPaths()[1])
install.packages("/Users/juxue/Downloads/ompr-master.zip", repos = NULL, type = "source")
R.version.string
install.packages("lpSolveAPI")
library(ompr)               # or library(ompr, lib.loc=.libPaths()[1])
library(ompr.roi)
library(ROI.plugin.glpk)
install.packages("ompr", repos = "https://cloud.r-project.org")
install.packages("ompr.roi", repos = "https://cloud.r-project.org")
install.packages("ROI.plugin.glpk", repos = "https://cloud.r-project.org")
library(slam)               # test that slam loads
library(ompr)               # or library(ompr, lib.loc=.libPaths()[1])
library(ompr.roi)
library(ROI.plugin.glpk)
remotes::install_github("dirkschumacher/ompr")
remotes::install_github("dirkschumacher/ompr.roi")
source("/Users/juxue/Desktop/fyp/GroupAllocator/R/optimization_model.R", encoding = "UTF-8")
install.packages("Rglpk", repos = "https://cloud.r-project.org")
source("/Users/juxue/Desktop/fyp/GroupAllocator/R/optimization_model.R", encoding = "UTF-8")
xcode-select --install
q()
