result
"
under each topic, we should have x teams, each with n_subteams sub-teams (e.g. frontend, modelling).
we allocate our self-formed groups to subteams under teams by maximizing preference score.
e.g. 
c_team = 8
b_subteam = 4
min_topic_teams <- 2
we should allocate students to groups of 8 with 4 under each sub-team, with a minimum 2 teams under each project
"
n_topics <- length(topics) # total number of topics available
n_subteams <- length(valid_subteams) # types of valid subteams per team. if n_subteams = 2, means there are 2 subteams under each team
x_topic_teams <- 3 # each topic should have at least 2 teams
n_groups  <- nrow(df) # each row of input dataset is one self-formed group
# define:
c_team <- 6 # each team should have a size of c
b_subteam <- 3 # each subteam should have an ideal size of b
p_penalty <- 2
minCapacity <- c_team - 2
# create model
model <- MIPModel() %>%
  
  # 1) Decision variable A[g,t,j,s]
  add_variable(A[g, t, j, s],
               g = 1:n_groups,
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               type = "binary") %>%
  
  # 2) Slack variable for shortfall in each sub-team
  # This can be integer if group sizes are integers.
  add_variable(slack[t, j, s],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               lb = 0,
               type = "integer") %>%
  # 3) Team activation variable: Z[t,j] = 1 if team j under topic t is formed, 0 otherwise.
  add_variable(Z[t, j],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               type = "binary") %>%
  
  # Objective: maximize sum of preferences - penalty * total slack
  set_objective(
    sum_expr(pref_array[g, t, s] * A[g, t, j, s],
             g = 1:n_groups,
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams)
    -
    p_penalty * sum_expr(slack[t, j, s],
                         t = 1:n_topics,
                         j = 1:x_topic_teams,
                         s = 1:n_subteams),
    sense = "max"
  ) %>%
  
  # 1) Each group is assigned exactly once
  add_constraint(
    sum_expr(A[g, t, j, s],
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams) == 1,
    g = 1:n_groups
  ) %>%
  
  # 2) Each sub-team must have at least 1 group if the team is formed
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups) >= Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 3) Sub-team capacity with slack: for each sub-team, total assigned group sizes plus slack equals b_subteam
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) + slack[t, j, s] == b_subteam,
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 4) Tie assignments to team activation:
  #    If Z[t,j]=0 then no groups can be assigned to any sub-team of team (t,j)
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) <= n_groups * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 5) Minimum team capacity: if team (t,j) is formed (Z[t,j]=1), it must have at least minCapacity members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) >= minCapacity * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 6) At least one team per topic
  add_constraint(
    sum_expr(Z[t, j], j = 1:x_topic_teams) >= 1,
    t = 1:n_topics
  ) %>%
  # 7) Minimum threshold for each sub-team: if team (t,j) is active, then each sub-team must have at least (b_subteam - 1) members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) >= (b_subteam - 1) * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  )
"
to avoid creating “tiny” second teams:
introduce a binary “team active” variable Z[t,j] for each team slot (t,j). 
If Z[t,j]=1, the solver is allowed to assign groups to that team; 
if Z[t,j]=0, that team remains unused. 
Then enforce a minimum capacity so that if Z[t,j]=1, 
the team must have at least some minimum number of students (or seats). 
This way, the solver will only “open” that second team if it can fill it enough to be worthwhile.
"
result <- solve_model(
  model,
  with_ROI(
    solver = "glpk",
    verbose = TRUE,
  )
)
result
"
under each topic, we should have x teams, each with n_subteams sub-teams (e.g. frontend, modelling).
we allocate our self-formed groups to subteams under teams by maximizing preference score.
e.g. 
c_team = 8
b_subteam = 4
min_topic_teams <- 2
we should allocate students to groups of 8 with 4 under each sub-team, with a minimum 2 teams under each project
"
n_topics <- length(topics) # total number of topics available
n_subteams <- length(valid_subteams) # types of valid subteams per team. if n_subteams = 2, means there are 2 subteams under each team
x_topic_teams <- 3 # each topic should have at least 2 teams
n_groups  <- nrow(df) # each row of input dataset is one self-formed group
# define:
c_team <- 8 # each team should have a size of c
b_subteam <- 4 # each subteam should have an ideal size of b
p_penalty <- 2
minCapacity <- c_team - 2
# create model
model <- MIPModel() %>%
  
  # 1) Decision variable A[g,t,j,s]
  add_variable(A[g, t, j, s],
               g = 1:n_groups,
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               type = "binary") %>%
  
  # 2) Slack variable for shortfall in each sub-team
  # This can be integer if group sizes are integers.
  add_variable(slack[t, j, s],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               lb = 0,
               type = "integer") %>%
  # 3) Team activation variable: Z[t,j] = 1 if team j under topic t is formed, 0 otherwise.
  add_variable(Z[t, j],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               type = "binary") %>%
  
  # Objective: maximize sum of preferences - penalty * total slack
  set_objective(
    sum_expr(pref_array[g, t, s] * A[g, t, j, s],
             g = 1:n_groups,
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams)
    -
    p_penalty * sum_expr(slack[t, j, s],
                         t = 1:n_topics,
                         j = 1:x_topic_teams,
                         s = 1:n_subteams),
    sense = "max"
  ) %>%
  
  # 1) Each group is assigned exactly once
  add_constraint(
    sum_expr(A[g, t, j, s],
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams) == 1,
    g = 1:n_groups
  ) %>%
  
  # 2) Each sub-team must have at least 1 group if the team is formed
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups) >= Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 3) Sub-team capacity with slack: for each sub-team, total assigned group sizes plus slack equals b_subteam
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) + slack[t, j, s] == b_subteam,
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 4) Tie assignments to team activation:
  #    If Z[t,j]=0 then no groups can be assigned to any sub-team of team (t,j)
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) <= n_groups * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 5) Minimum team capacity: if team (t,j) is formed (Z[t,j]=1), it must have at least minCapacity members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) >= minCapacity * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 6) At least one team per topic
  add_constraint(
    sum_expr(Z[t, j], j = 1:x_topic_teams) >= 1,
    t = 1:n_topics
  ) %>%
  # 7) Minimum threshold for each sub-team: if team (t,j) is active, then each sub-team must have at least (b_subteam - 1) members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) >= (b_subteam - 1) * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  )
"
to avoid creating “tiny” second teams:
introduce a binary “team active” variable Z[t,j] for each team slot (t,j). 
If Z[t,j]=1, the solver is allowed to assign groups to that team; 
if Z[t,j]=0, that team remains unused. 
Then enforce a minimum capacity so that if Z[t,j]=1, 
the team must have at least some minimum number of students (or seats). 
This way, the solver will only “open” that second team if it can fill it enough to be worthwhile.
"
result <- solve_model(
  model,
  with_ROI(
    solver = "glpk",
    verbose = TRUE,
  )
)
result
"
under each topic, we should have x teams, each with n_subteams sub-teams (e.g. frontend, modelling).
we allocate our self-formed groups to subteams under teams by maximizing preference score.
e.g. 
c_team = 8
b_subteam = 4
min_topic_teams <- 2
we should allocate students to groups of 8 with 4 under each sub-team, with a minimum 2 teams under each project
"
n_topics <- length(topics) # total number of topics available
n_subteams <- length(valid_subteams) # types of valid subteams per team. if n_subteams = 2, means there are 2 subteams under each team
x_topic_teams <- 3 # each topic should have at least 2 teams
n_groups  <- nrow(df) # each row of input dataset is one self-formed group
# define:
c_team <- 8 # each team should have a size of c
b_subteam <- 4 # each subteam should have an ideal size of b
p_penalty <- 2
minCapacity <- c_team - 2
# create model
model <- MIPModel() %>%
  
  # 1) Decision variable A[g,t,j,s]
  add_variable(A[g, t, j, s],
               g = 1:n_groups,
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               type = "binary") %>%
  
  # 2) Slack variable for shortfall in each sub-team
  # This can be integer if group sizes are integers.
  add_variable(slack[t, j, s],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               lb = 0,
               type = "integer") %>%
  # 3) Team activation variable: Z[t,j] = 1 if team j under topic t is formed, 0 otherwise.
  add_variable(Z[t, j],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               type = "binary") %>%
  
  # Objective: maximize sum of preferences - penalty * total slack
  set_objective(
    sum_expr(pref_array[g, t, s] * A[g, t, j, s],
             g = 1:n_groups,
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams)
    -
    p_penalty * sum_expr(slack[t, j, s],
                         t = 1:n_topics,
                         j = 1:x_topic_teams,
                         s = 1:n_subteams),
    sense = "max"
  ) %>%
  
  # 1) Each group is assigned exactly once
  add_constraint(
    sum_expr(A[g, t, j, s],
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams) == 1,
    g = 1:n_groups
  ) %>%
  
  # 2) Each sub-team must have at least 1 group if the team is formed
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups) >= Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 3) Sub-team capacity with slack: for each sub-team, total assigned group sizes plus slack equals b_subteam
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) + slack[t, j, s] == b_subteam,
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 4) Tie assignments to team activation:
  #    If Z[t,j]=0 then no groups can be assigned to any sub-team of team (t,j)
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) <= n_groups * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 5) Minimum team capacity: if team (t,j) is formed (Z[t,j]=1), it must have at least minCapacity members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) >= minCapacity * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 6) At least one team per topic
  add_constraint(
    sum_expr(Z[t, j], j = 1:x_topic_teams) >= 1,
    t = 1:n_topics
  ) %>%
  # 7) Minimum threshold for each sub-team: if team (t,j) is active, then each sub-team must have at least (b_subteam - 1) members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) >= (b_subteam - 1) * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  )
"
to avoid creating “tiny” second teams:
introduce a binary “team active” variable Z[t,j] for each team slot (t,j). 
If Z[t,j]=1, the solver is allowed to assign groups to that team; 
if Z[t,j]=0, that team remains unused. 
Then enforce a minimum capacity so that if Z[t,j]=1, 
the team must have at least some minimum number of students (or seats). 
This way, the solver will only “open” that second team if it can fill it enough to be worthwhile.
"
"
under each topic, we should have x teams, each with n_subteams sub-teams (e.g. frontend, modelling).
we allocate our self-formed groups to subteams under teams by maximizing preference score.
e.g. 
c_team = 8
b_subteam = 4
min_topic_teams <- 2
we should allocate students to groups of 8 with 4 under each sub-team, with a minimum 2 teams under each project
"
n_topics <- length(topics) # total number of topics available
n_subteams <- length(valid_subteams) # types of valid subteams per team. if n_subteams = 2, means there are 2 subteams under each team
x_topic_teams <- 3 # each topic should have at least 2 teams
n_groups  <- nrow(df) # each row of input dataset is one self-formed group
# define:
c_team <- 10 # each team should have a size of c
b_subteam <- 5 # each subteam should have an ideal size of b
p_penalty <- 2
minCapacity <- c_team - 2
# create model
model <- MIPModel() %>%
  
  # 1) Decision variable A[g,t,j,s]
  add_variable(A[g, t, j, s],
               g = 1:n_groups,
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               type = "binary") %>%
  
  # 2) Slack variable for shortfall in each sub-team
  # This can be integer if group sizes are integers.
  add_variable(slack[t, j, s],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               s = 1:n_subteams,
               lb = 0,
               type = "integer") %>%
  # 3) Team activation variable: Z[t,j] = 1 if team j under topic t is formed, 0 otherwise.
  add_variable(Z[t, j],
               t = 1:n_topics,
               j = 1:x_topic_teams,
               type = "binary") %>%
  
  # Objective: maximize sum of preferences - penalty * total slack
  set_objective(
    sum_expr(pref_array[g, t, s] * A[g, t, j, s],
             g = 1:n_groups,
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams)
    -
    p_penalty * sum_expr(slack[t, j, s],
                         t = 1:n_topics,
                         j = 1:x_topic_teams,
                         s = 1:n_subteams),
    sense = "max"
  ) %>%
  
  # 1) Each group is assigned exactly once
  add_constraint(
    sum_expr(A[g, t, j, s],
             t = 1:n_topics,
             j = 1:x_topic_teams,
             s = 1:n_subteams) == 1,
    g = 1:n_groups
  ) %>%
  
  # 2) Each sub-team must have at least 1 group if the team is formed
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups) >= Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 3) Sub-team capacity with slack: for each sub-team, total assigned group sizes plus slack equals b_subteam
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) + slack[t, j, s] == b_subteam,
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  ) %>%
  
  # 4) Tie assignments to team activation:
  #    If Z[t,j]=0 then no groups can be assigned to any sub-team of team (t,j)
  add_constraint(
    sum_expr(A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) <= n_groups * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 5) Minimum team capacity: if team (t,j) is formed (Z[t,j]=1), it must have at least minCapacity members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups, s = 1:n_subteams) >= minCapacity * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams
  ) %>%
  
  # 6) At least one team per topic
  add_constraint(
    sum_expr(Z[t, j], j = 1:x_topic_teams) >= 1,
    t = 1:n_topics
  ) %>%
  # 7) Minimum threshold for each sub-team: if team (t,j) is active, then each sub-team must have at least (b_subteam - 1) members.
  add_constraint(
    sum_expr(group_size[g] * A[g, t, j, s], g = 1:n_groups) >= (b_subteam - 1) * Z[t,j],
    t = 1:n_topics, j = 1:x_topic_teams, s = 1:n_subteams
  )
"
to avoid creating “tiny” second teams:
introduce a binary “team active” variable Z[t,j] for each team slot (t,j). 
If Z[t,j]=1, the solver is allowed to assign groups to that team; 
if Z[t,j]=0, that team remains unused. 
Then enforce a minimum capacity so that if Z[t,j]=1, 
the team must have at least some minimum number of students (or seats). 
This way, the solver will only “open” that second team if it can fill it enough to be worthwhile.
"
result <- solve_model(
  model,
  with_ROI(
    solver = "glpk",
    verbose = TRUE,
  )
)
result
sum_of_all_students <- sum(group_size)
max_capacity <- n_topics * n_subteams * b_subteams * x_topic_teams
sum_of_all_students
max_capacity
large_groups <- which(group_size > b_subteam)  # or group_size > c_team
large_groups
cat("Solver status:", result$status, "\n")
cat("Objective value:", result$objective_value, "\n")
solution_A <- get_solution(result, A[g, t, j, s])
assigned <- subset(solution_A, value > 0.5) # keep only assignments where A == 1
assigned
assigned$topic_name   <- topics[assigned$t]
assigned$subteam_name <- valid_subteams[assigned$s]
assigned$project_team <- paste0(assigned$topic_name, "_team", assigned$j)
final_output_list <- lapply(seq_len(nrow(assigned)), function(k) {
  # Extract the assigned row
  g_val <- assigned$g[k]
  project_team_val <- assigned$project_team[k]
  subteam_val      <- assigned$subteam_name[k]
  
  # Get all student IDs in that group (row g_val)
  row_ids <- df[g_val, group_id_cols, drop = FALSE]
  # Filter out NA
  student_ids <- unlist(row_ids[!is.na(row_ids)])
  
  # Build a small data frame: one row per student
  if (length(student_ids) == 0) {
    return(NULL)  # no valid IDs
  }
  data.frame(
    student_id    = student_ids,
    project_team  = project_team_val,
    subteam       = subteam_val,
    stringsAsFactors = FALSE
  )
})
# Combine them all
final_output <- do.call(rbind, final_output_list)
final_output <- final_output[order(final_output$project_team), ]
final_output
cd ~/Desktop/fyp/GroupAllocator/inst/shiny_app
R
q()
